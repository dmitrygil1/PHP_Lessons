<?php
//Урок про ОБЛАСТЬ ВИДИМОСТИ АРГУМЕНТОВ функции

//по умолчанию аргументы функции имеют локальную область видимости,
//это означает, что аргумент функции используется в виде $arg только внутри функции

$a = 1;
$b = 2;

function getSum (int $a, int $b) : string
{
    function getSubSum (int $a, int $b): string
    {
        global $a; //ГЛОБАЛЬНАЯ ПЕРЕМЕННАЯ

        if ($a > 10) {
            global $d;
            $d = $a;
            return 'a больше 10';

        }
        $a = $a + $b;
        return 'Я - дочерняя функция, которая выводит сумму аргументов переданных в меня:'.$a;
    }
    return 'Я основная функция,которая выводит первую пачку аргументов: '.$a . ' и ' . $b;
};
//var_dump(getSubSum(5,10));//выдаст ошибку, поскольку подфункция ещё не определена.
//Для корректной работы сначала нужно обратиться к родительской функции, а затем к дочерней
var_dump($a);//1
var_dump($b);//2
var_dump(getSum(5,10));// 5 и 10 - вывод первой функции
var_dump(getSubSum(5,10));//11 - вывод дочерней функции

//Чтобы не писать кучу ссылок - используются глобальные переменные, к которым можно обращаться везде (в т.ч. в функции)
//после добавления global к $a в дочерней функции мы теперь можем обратиться к ней напрямую, без вызова родительской:
var_dump($a);//11 т.к. переменная теперь глобальная (работает как ссылка)
var_dump($b);//2
var_dump(getSubSum(1,2));
var_dump($d);//11 т.к. теперь $d - в глобальной области видимости. Ошибки нет


//Вариант 2 - объявление глобальной переменной до самой функции

global $f;
$f = 12;

function getGlobalSubSum (int $a, int $b): string
    {
        global $a; //ГЛОБАЛЬНЫЕ ПЕРЕМЕННЫЕ
        global $b;
        global $f;//также нужно объявить её внутри функции
        if ($a > 10) {
            return $a = $a + $b +$f;
        }
        return 'Я - дочерняя функция, которая выводит сумму аргументов переданных в меня:'.$a;
    };

var_dump(getGlobalSubSum(10,2));//25 - т.к. мы в функции обратились к глобальной переменной и использовали её

//Однако использование глобальных переменных имеет много минусов. Куда лучше использовать СТАТИЧЕСКУЮ ПЕРЕМЕННУЮ

//---------СТАТИЧЕСКИЕ ПЕРЕМЕННЫЕ---------//

function getStaticSum () : string
{
    static $k;
    var_dump($k);
    $k++;
    return 'Я - выполненная функция со статической переменной k, равной:'.$k;
};

var_dump(getStaticSum());
var_dump(getStaticSum());
var_dump(getStaticSum());

//Однако сама переменная в глобальную область видимости не попадает, хотя и сохраняется как глобальная переменная