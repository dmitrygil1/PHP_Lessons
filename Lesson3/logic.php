<?php
// Логические операторы (очень похожи на операторы сравнения, но с другой логикой)

// Логическое И ($$ или AND)

$a = true;
$b = false;
$c = true;

var_dump($a && $b); // false
var_dump($a && $c); // true - потому что true и true = true
var_dump($b && $c); // false, причем обработка останавливается ещё на $b т.к. дальше оператору смотреть нет смысла

var_dump( $a && $b && true && $c); // false - потому что $b=false, заметка: логическое И может быть довольно объемным

//Логическое ИЛИ ( OR или || )
var_dump($a || $b); // true
var_dump($a || $c); // true
var_dump($b || $c); // true

var_dump($b || false); //false - оба значения = false

//Исключающее или (XOR) - как OR, только наоборот. Выдает true если есть хоть одно false
var_dump($a xor $b); // true
var_dump($a xor $c); // false - потому что оба оператора true
var_dump($b xor $c); // true
var_dump( $a xor $b xor true xor $c); //false

//Логическое НЕ (!) - переделывает true на false и наоборот
var_dump(!$a); //было true - стало false
var_dump(!$b); //было false - стало true
var_dump(!$c); //было true - стало false



//----------------ПОБИТОВЫЕ ОПЕРАТОРЫ----------------//
//тут все в названии, сравнивает операнды по битам
$a = 170;
$b = 125;

var_dump(decbin($a)); //10101010 - 170 в битах
var_dump(decbin($b)); //1111101 - 125 в битах

//Побитовое И (&) - схема тут следуюзая 101 и 111 = 101 (где 1 и 1 = 1, где 1 и 0 = 0, где 0 и 0 = 0)
var_dump(decbin($a & $b)); // 10101010 и 1111101 = 101000   - единицы только там, где совпало 1 и 1


