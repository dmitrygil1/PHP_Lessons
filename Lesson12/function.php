<?php
// Урок по функциям PHP

namespace globalSum;
function funcName (/*операторы*/) {     //объявление функции
    //тело функции
    return /*Что возвращаем из функции*/;
};

//заметка: имя функции должно начинаться с буквы или _, getSum = GETSUM

//заметка: функции не стоит определять дважды, чтобы избежать ошибок лучше использовать обработчик, вида:

if (function_exists(funcName())) {
    function funcName() {
    }
};

//Чтобы разграничивать функции существует ПРОСТРАНСТВО ИМЕН
//с помощью него можно отделить классы и функции
//Пространство имен определяется в начале файла


//ПЕРЕДАЧА АРГУМЕНТОВ, ТЕЛО ФУНКЦИИ, оператор RETURN
function getSum ($a, $b = 10, $c = 10) {
    return $a + $b;
};

//ВАЖНО: переменная $a не равна переменной в функции $a из-за области видимости аргумента и переменной
//Если передавать в функцию недостаточно переменных - будет ошибка. Чтобы избежать:
//в аргументе функции можно ставить значение по умолчанию, но только постоянное (не переменные)

//Более того, мы можем передать переменную $a в качестве аргумента, который внутри функции называется также:

$number = 12;//эта переменная не является аргументом функции. ЭТО ОТДЕЛЬНО

function getNumber ($number) { //И ЭТО ОТДЕЛЬНО
    return $number;
}
echo getNumber($number);//мы подставляем значение переменной (12) в качестве аргумента, даже не смотря на одно название


//Чтобы получить аргументы внутри функций - есть специальные функции, напр func_num_args(); - количество аргументов

function howMuchArgs ($a, $b, $c) {
    echo '</br>';
    echo func_num_args();//3 - число аргументов
    echo '</br>';
    return $a+$b+$c;
};

echo howMuchArgs($number,15,23);//50 - сумма, первый аргумент - переменная
$number = 3;
echo howMuchArgs($number,15,23);//41 - сумма, после изменения переменной


//ПЕРЕДАЧА ПАРАМЕТРА ПО ССЫЛКЕ
//используется редко, обычно необходимо, чтобы аргумент не затирался после использования функции (сохранить $b например

$c = 5;
$d = &$c;//ссылка на переменную

var_dump($c);//5
var_dump($d);//тоже 5, т.к. в переменной лежит ссылка

$c = 12;
var_dump($c);//12
var_dump($d);//тоже 12, т.к. в переменной ссылка обновляется автоматически

//Пример использования ссылок в функциях

$a = 10;
$b = 20;

function LinkSum(&$a, $b) {
    $a = $a + $b;
    if ($a < 35) {
        return 'Наше $a<35 и равно: '.$a;
    } else {
        return 'О, теперь $a кажется стал больше и равен: '.$a;
    }
}

var_dump($a);//10 - определено выше
var_dump($b);//20 - определено выше
echo linkSum($a, $b);//30, сумма двух переменных - функция выполнилась.
var_dump($a);//теперь переменная $a - 30, т.к. она была ссылкой
var_dump($b);//20, как и было
echo linkSum($a, $b);//50 - сумма изменилась т.к. $a стала 30, что дает нам основание для рекурсии переменной
//ВАЖНО - использовать ссылки в переменных следует с осторожностью


//ТИПЫ ДАННЫХ В АРГУМЕНТАХ ФУКНЦИЙ (вход/выход) - начиная с PHP5 можно задавать типы данных аргументов

function argType (int $a, int $b) : int { //конструкция :int - тип значения на выходе
    $a = $a + $b;
    return $a;
};
var_dump( argType(1.5,'12')); //int 13 - сработало привидение типов: float => int и string => int;

//Для включения строгой типизации используется declare(strict_types = 1); - задаётся самой первой строкой
//После включения строгой типизации функция выше уже выдаст ошибку
